# Generated by Django 3.0.7 on 2020-07-09 18:06

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portfolio_type', models.BooleanField(default=False)),
                ('currency', models.CharField(default='â‚¬', max_length=1)),
                ('cash', models.FloatField(default=0, null=True)),
                ('total_invested_value', models.FloatField(default=0, null=True)),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'portfolio_type', 'date')},
            },
        ),
        migrations.CreateModel(
            name='SMAModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('low_sma', models.IntegerField(default=10)),
                ('high_sma', models.IntegerField(default=34)),
                ('stop_loss', models.FloatField(default=0.1)),
                ('take_profit', models.FloatField(default=0.25)),
                ('created_at', models.DateField(default=datetime.date.today)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=50)),
                ('sector', models.CharField(max_length=50)),
                ('industry', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SMAPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_date', models.DateField(default=None)),
                ('buy', models.BooleanField(default=None, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sma_position', to='api.SMAModel')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sma_position', to='api.Stock')),
            ],
            options={
                'ordering': ['-price_date'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_username', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=50, null=True))),
                ('broker_password', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=50, null=True))),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invest_date', models.DateField(default=None)),
                ('invest_value', models.FloatField(default=0)),
                ('invest_units', models.IntegerField(default=0)),
                ('open_rate', models.FloatField(default=0)),
                ('current_rate', models.FloatField(default=0)),
                ('stop_loss_rate', models.FloatField(default=0)),
                ('take_profit_rate', models.FloatField(default=0)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='api.Portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='api.Stock')),
            ],
        ),
        migrations.CreateModel(
            name='SMABacktest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('precision', models.FloatField(default=0)),
                ('score', models.FloatField(default=0)),
                ('data_size', models.IntegerField(default=0)),
                ('stock_return', models.FloatField(default=0)),
                ('stock_cagr', models.FloatField(default=0)),
                ('stock_sd', models.FloatField(default=0)),
                ('model_return', models.FloatField(default=0)),
                ('model_cagr', models.FloatField(default=0)),
                ('model_sd', models.FloatField(default=0)),
                ('buy_count', models.IntegerField(default=0)),
                ('sell_count', models.IntegerField(default=0)),
                ('stop_loss_count', models.IntegerField(default=0)),
                ('take_profit_count', models.IntegerField(default=0)),
                ('max_drawdown', models.FloatField(default=0)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backtest', to='api.SMAModel')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backtest', to='api.Stock')),
            ],
            options={
                'ordering': ['-model_cagr'],
                'unique_together': {('model', 'stock')},
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_date', models.DateField(default=None)),
                ('open', models.FloatField(default=0)),
                ('high', models.FloatField(default=0)),
                ('low', models.FloatField(default=0)),
                ('close', models.FloatField(default=0)),
                ('volume', models.BigIntegerField(default=0)),
                ('created_at', models.DateField(default=datetime.date.today)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='api.Stock')),
            ],
            options={
                'ordering': ['-price_date'],
                'unique_together': {('stock', 'price_date')},
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_date', models.DateField(default=None)),
                ('position', models.CharField(default=None, max_length=4)),
                ('num_of_shares', models.IntegerField(default=None)),
                ('order_price', models.FloatField(default=None)),
                ('stop_loss', models.FloatField(default=None)),
                ('take_profit', models.FloatField(default=None)),
                ('status', models.CharField(default='created', max_length=25)),
                ('submit_date', models.DateField(default=None)),
                ('executed_date', models.DateField(default=None)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to='api.Stock')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('price_date', 'position', 'stock')},
            },
        ),
    ]
