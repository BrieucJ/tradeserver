{"ast":null,"code":"import { API_URL } from './Constants';\nexport const get = (path, opts = {}) => {\n  return makeRequest(path, opts);\n};\nexport const post = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"POST\",\n    params: JSON.stringify(data),\n    opts: opts\n  });\n};\nexport const put = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"PUT\",\n    params: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n};\nexport const patch = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"PATCH\",\n    params: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n};\nexport const destroy = (path, opts) => {\n  return makeRequest(path, {\n    method: \"DELETE\"\n  });\n};\nexport const makeRequest = (path, opts) => {\n  // console.log('REQUEST')\n  let token = localStorage.getItem('token');\n  let url = API_URL + path;\n  let method = opts.method || \"GET\";\n  opts.headers = opts.headers || {}; //   opts.headers[\"Locale\"] = i18n.locale\n  //   opts.headers[\"Timezone\"] = Localization.timezone\n\n  opts.headers[\"Accept\"] = \"application/json\";\n  opts.headers[\"Content-Type\"] = \"application/json\";\n  console.log(path);\n  console.log(opts);\n\n  if (token !== undefined) {\n    opts.headers[\"Authorization\"] = token;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n\n    xhr.onload = function () {\n      if (this.status >= 200 && this.status < 300) {\n        resolve(JSON.parse(xhr.response));\n      } else {\n        var resp = JSON.parse(xhr.response).error;\n        reject({\n          status: resp.status,\n          statusText: resp.message\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      var resp = JSON.parse(xhr.response).error;\n      reject({\n        status: resp.status,\n        statusText: resp.message\n      });\n    };\n\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        xhr.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n\n    var params = opts.params; // Need to stringify if we've been given an object\n    // If we have a string, this is skipped.\n\n    if (params && typeof params === 'object') {\n      params = Object.keys(params).map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n      }).join('&');\n    }\n\n    xhr.send(params);\n  });\n};","map":{"version":3,"sources":["/Users/brieucjamain/Desktop/TradeServer/frontend/src/utils/Api.js"],"names":["API_URL","get","path","opts","makeRequest","post","data","method","params","JSON","stringify","put","headers","patch","destroy","token","localStorage","getItem","url","console","log","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","status","parse","response","resp","error","statusText","message","onerror","Object","keys","forEach","key","setRequestHeader","map","encodeURIComponent","join","send"],"mappings":"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","sourcesContent":["import {API_URL} from './Constants'\n\nexport const get = (path, opts = {}) => {\n  return makeRequest(path, opts)\n}\n\nexport const post = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"POST\",\n    params: JSON.stringify(data),\n    opts: opts\n  })\n}\n\nexport const put = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"PUT\",\n    params: JSON.stringify(data),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n}\n\nexport const patch = (path, data, opts) => {\n  return makeRequest(path, {\n    method: \"PATCH\",\n    params: JSON.stringify(data),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n}\n\nexport const destroy = (path, opts) => {\n  return makeRequest(path, { method: \"DELETE\" })\n}\n\nexport const makeRequest = (path, opts) => {\n  // console.log('REQUEST')\n  let token = localStorage.getItem('token')\n  let url = API_URL + path\n  let method = opts.method || \"GET\"\n  opts.headers = opts.headers || {}\n//   opts.headers[\"Locale\"] = i18n.locale\n//   opts.headers[\"Timezone\"] = Localization.timezone\n  opts.headers[\"Accept\"] = \"application/json\"\n  opts.headers[\"Content-Type\"] = \"application/json\"\n  console.log(path)\n  console.log(opts)\n  if (token !== undefined) { opts.headers[\"Authorization\"] = token }\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.onload = function () {\n      if (this.status >= 200 && this.status < 300) {\n        resolve(JSON.parse(xhr.response));\n      } else {\n        var resp = JSON.parse(xhr.response).error;\n        reject({ \n          status: resp.status,\n          statusText: resp.message,\n        });\n      }\n    };\n    xhr.onerror = function () {\n      var resp = JSON.parse(xhr.response).error;\n      reject({\n        status: resp.status,\n        statusText: resp.message,\n      });\n    };\n    if (opts.headers) {\n      Object.keys(opts.headers).forEach(function (key) {\n        xhr.setRequestHeader(key, opts.headers[key]);\n      });\n    }\n    var params = opts.params;\n    // Need to stringify if we've been given an object\n    // If we have a string, this is skipped.\n    if (params && typeof params === 'object') {\n      params = Object.keys(params).map(function (key) {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n      }).join('&');\n    }\n    xhr.send(params);\n  });\n}"]},"metadata":{},"sourceType":"module"}